package main

import (
	"os"
	"strings"
)

func Example() {
	yamlInput := `
		types:
			logger:
				package: github.com/tarokamikaze/goldi-example/lib
				type: SimpleLogger

			my_fancy.client:
				package: github.com/tarokamikaze/goldi-example/lib
				type: Client
				factory: NewDefaultClient
				arguments:
					- "%client_base_url%"   # As in the API you can use parameters here
					- "@logger"             # You can also reference other types

			time.clock:
				package: github.com/tarokamikaze/goldi-example/lib/mytime
				type: Clock
				factory: NewSystemClock

			http_handler:
				package: github.com/fgrosse/servo/example
				func:    HandleHTTP         # You can register functions as types using the "func" keyword
	`

	outputPackageName := "github.com/tarokamikaze/goldi-example/lib"
	inputPath := "../config/types.yml"
	config := NewConfig(outputPackageName, *functionName, inputPath, *outputPath)
	gen := NewGenerator(config)
	gen.Generate(strings.NewReader(yamlInput), os.Stdout)

	// Output:
	// package lib
	//
	// import (
	// 	"github.com/tarokamikaze/goldi"
	// 	"github.com/tarokamikaze/goldi-example/lib/mytime"
	// 	"github.com/fgrosse/servo/example"
	// )
	//
	// // RegisterTypes registers all types that have been defined in the file "../config/types.yml"
	// //
	// // DO NOT EDIT THIS FILE: it has been generated by goldigen v1.0.1.
	// // It is however good practice to put this file under version control.
	// // See https://github.com/tarokamikaze/goldi for what is going on here.
	// func RegisterTypes(types goldi.TypeRegistry) {
	// 	types.RegisterAll(map[string]goldi.TypeFactory{
	// 		"http_handler":    goldi.NewFuncType(example.HandleHTTP),
	// 		"logger":          goldi.NewStructType(new(SimpleLogger)),
	// 		"my_fancy.client": goldi.NewType(NewDefaultClient, "%client_base_url%", "@logger"),
	// 		"time.clock":      goldi.NewType(mytime.NewSystemClock),
	//	})
	// }
}
